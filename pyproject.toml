[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "spacy-cleaner"
version = "3.2.1"
description = "Easily clean text with spaCy!"
readme = "README.md"
authors = ["spacy-cleaner <hallcellan@gmail.com>"]
license = "MIT"
repository = "https://github.com/Ce11an/spacy-cleaner"
homepage = "https://github.com/Ce11an/spacy-cleaner"

classifiers = [
  "Development Status :: 5 - Production/Stable",
  "Intended Audience :: Developers",
  "Operating System :: OS Independent",
  "Topic :: Software Development :: Libraries :: Python Modules",
  "License :: OSI Approved :: MIT License",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
]

[tool.poetry.dependencies]
python = ">=3.8,<3.12"
spacy = "~=3.7.2"
tqdm = "~=4.66.1"
spacy-lookups-data = "~=1.0.5"
types-tqdm = "^4.66.0.5"

[tool.poetry.group.dev.dependencies]
ruff = "^0.1.6"
mypy = "^1.7.0"
pre-commit = "^3.3.5"
pytest = "^7.4.3"
pytest-cov = "^4.1.0"
mkdocs-material = "^9.4.12"
mkdocstrings = {extras = ["python"], version = "^0.24.0"}

[tool.ruff]
line-length = 80
# Same as Black.
indent-width = 4
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "__pycache__",
]

target-version = "py38"

ignore = [
    "ANN101",
    "D107"
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = [
    "S101",
    "PLR2004"
]

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"
# Like Black, indent with spaces, rather than tabs.
indent-style = "space"
# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false
# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

[tool.ruff.lint]
select = [
    # pycodestyle
    "E",
    # pydocstyle
    "D",
    # Pyflakes
    "F",
    # pyupgrade
    "UP",
    # flake8-bugbear
    "B",
    # flake8-simplify
    "SIM",
    # isort
    "I",
    # pep8-naming
    "N",
    # pycodestyle warning
    "W",
    # Perflint
    "PERF",
    # NumPy-specific rules
    "NPY",
    # tryceratops
    "TRY",
    # Pylint
    "PL",
    # flake8-annotations
    "ANN",
    # flake8-bandit
    "S",
    # flake8-blind-except
    "BLE",
    # flake8-boolean-trap
    "FBT",
    # flake8-builtins
    "A",
    # flake8-comprehensions
    "C4",
    # flake8-errmsg (EM)
    "EM",
    # flake8-import-conventions
    "ICN",
    # flake8-logging-format
    "G",
    # flake8-no-pep420
    "INP",
    # flake8-pie
    "PIE",
    # flake8-pyi
    "PYI",
    # flake8-pytest-style
    "PT",
    # flake8-quotes
    "Q",
    # flake8-raise
    "RSE",
    # flake8-return
    "RET",
    # flake8-self
    "SLF",
    # flake8-slots
    "SLOT",
    # flake8-tidy-imports
    "TID",
    # flake8-unused-arguments
    "ARG",
    # flake8-use-pathlib
    "PTH",
    # flake8-todos
    "TD",
    # eradicate
    "ERA",
    # pandas-vet
    "PD",
    # pygrep-hooks
    "PGH",
]

[tool.ruff.pydocstyle]
convention = "google"

[tool.mypy]
python_version = "3.8"
pretty = true
show_traceback = true
color_output = true
disallow_untyped_defs = true
disallow_any_unimported = true
no_implicit_optional = true
check_untyped_defs = true
warn_return_any = true
show_error_codes = true
warn_unused_ignores = true

[tool.pytest.ini_options]
norecursedirs = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "__pycache__",
]

[tool.coverage.report]
fail_under = 90
show_missing = true
exclude_lines = [
    "if __name__ == .__main__.:",
    "pragma: no cover",
]
